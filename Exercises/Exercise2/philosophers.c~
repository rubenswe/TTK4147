#include<stdio.h>
#include<string.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>



pthread_mutex_t fork1;
pthread_mutex_t fork2;
pthread_mutex_t fork3;
pthread_mutex_t fork4;
pthread_mutex_t fork5;

void  *phil(i) {

	int rigth;
	int left;

	while(1) {
		sleep(5);
		rigth = i;
		left = i-1;
		if (left == 0) {
			left = 5;
		}
		pthread_mutex_lock(&fork[left]);
		pthread_mutex_lock(&fork[rigth]);
		printf("Philosopher %i is eating...\n", i);
		sleep(3);
		pthread_mutex_unlock(&fork[rigth]);
		pthread_mutex_unlock(&fork[left]);
	}		
	return NULL;	
}



int main(){

	int i;
	int philosophers=5;

	for (i=0; i<philosophers; i++) {
		pthread_mutex_init(&fork[i], NULL);
	}
	/*pthread_t phil1_thread;
	pthread_t phil2_thread;
	pthread_t phil3_thread;
	pthread_t phil4_thread;
	pthread_t phil5_thread;
*/

	

	for (i=0; i<philosophers; i++) {
		pthreat_create (&phil[i], NULL, phil, i);
	}

	

	/*number=1;
	if (pthread_create(&phil1_thread, NULL, phil, number )) {
		
		fprintf(stderr, "Error creating thread\n");
		return 1;
	}

	number=2;
	if (pthread_create(&phil2_thread, NULL, phil, number )) {
		
		fprintf(stderr, "Error creating thread\n");
		return 1;
	}

	number=3;
	if (pthread_create(&phil3_thread, NULL, phil, number )) {
		
		fprintf(stderr, "Error creating thread\n");
		return 1;
	}

	number=4;
	if (pthread_create(&phil4_thread, NULL, phil, number )) {
		
		fprintf(stderr, "Error creating thread\n");
		return 1;
	}	

	number=5;
	if (pthread_create(&phil5_thread, NULL, phil, number )) {
		
		fprintf(stderr, "Error creating thread\n");
		return 1;
	}
*/

}


